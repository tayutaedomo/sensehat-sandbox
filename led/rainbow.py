#
# Reference: https://github.com/astro-pi/python-sense-hat/blob/master/examples/rainbow.py
#
import sys
import time
import copy
from sense_hat import SenseHat


msleep = lambda x: time.sleep(x / 1000.0)


class LedRaindow:
    def __init__(self, sense):
        self.sense = sense
        self.init_pixels()

    def get_base_pixels(self):
        return [
            [255, 0, 0],   [255, 0, 0],   [255, 87, 0],  [255, 196, 0], [205, 255, 0], [95, 255, 0],  [0, 255, 13],  [0, 255, 122],
            [255, 0, 0],   [255, 96, 0],  [255, 205, 0], [196, 255, 0], [87, 255, 0],  [0, 255, 22],  [0, 255, 131], [0, 255, 240],
            [255, 105, 0], [255, 214, 0], [187, 255, 0], [78, 255, 0],  [0, 255, 30],  [0, 255, 140], [0, 255, 248], [0, 152, 255],
            [255, 223, 0], [178, 255, 0], [70, 255, 0],  [0, 255, 40],  [0, 255, 148], [0, 253, 255], [0, 144, 255], [0, 34, 255],
            [170, 255, 0], [61, 255, 0],  [0, 255, 48],  [0, 255, 157], [0, 243, 255], [0, 134, 255], [0, 26, 255],  [83, 0, 255],
            [52, 255, 0],  [0, 255, 57],  [0, 255, 166], [0, 235, 255], [0, 126, 255], [0, 17, 255],  [92, 0, 255],  [201, 0, 255],
            [0, 255, 66],  [0, 255, 174], [0, 226, 255], [0, 117, 255], [0, 8, 255],   [100, 0, 255], [210, 0, 255], [255, 0, 192],
            [0, 255, 183], [0, 217, 255], [0, 109, 255], [0, 0, 255],   [110, 0, 255], [218, 0, 255], [255, 0, 183], [255, 0, 74]
        ]

    def init_pixels(self):
        self.pixels = copy.deepcopy(self.get_base_pixels())

    def reset(self):
        self.init_pixels()
        self.sense.clear()
        self.show()

    def next(self):
        self.next_color()
        self.show()

    def next_color(self):
        for pix in self.pixels:
            r = pix[0]
            g = pix[1]
            b = pix[2]

            if (r == 255 and g < 255 and b == 0):
                g += 1

            if (g == 255 and r > 0 and b == 0):
                r -= 1

            if (g == 255 and b < 255 and r == 0):
                b += 1

            if (b == 255 and g > 0 and r == 0):
                g -= 1

            if (b == 255 and r < 255 and g == 0):
                r += 1

            if (r == 255 and b > 0 and g == 0):
                b -= 1

            pix[0] = r
            pix[1] = g
            pix[2] = b

    def show(self):
        self.sense.set_pixels(self.pixels)


class LedRaindowRT2LB(LedRaindow):
    def __init__(self, sense):
        super(LedRaindowT2B, self).__init__(sense)

    def get_base_pixels(self):
        return [
            [0, 255, 122], [0, 255, 240], [0, 152, 255], [0, 34, 255], [83, 0, 255], [201, 0, 255], [255, 0, 192], [255, 0, 74],
            [0, 255, 13], [0, 255, 131], [0, 255, 248], [0, 144, 255], [0, 26, 255], [92, 0, 255], [210, 0, 255], [255, 0, 183],
            [95, 255, 0], [0, 255, 22], [0, 255, 140], [0, 253, 255], [0, 134, 255], [0, 17, 255], [100, 0, 255], [218, 0, 255],
            [205, 255, 0], [87, 255, 0], [0, 255, 30], [0, 255, 148], [0, 243, 255], [0, 126, 255], [0, 8, 255], [110, 0, 255],
            [255, 196, 0], [196, 255, 0], [78, 255, 0], [0, 255, 40], [0, 255, 157], [0, 235, 255], [0, 117, 255], [0, 0, 255],
            [255, 87, 0], [255, 205, 0], [187, 255, 0], [70, 255, 0], [0, 255, 48], [0, 255, 166], [0, 226, 255], [0, 109, 255],
            [255, 0, 0], [255, 96, 0], [255, 214, 0], [178, 255, 0], [61, 255, 0], [0, 255, 57], [0, 255, 174], [0, 217, 255],
            [255, 0, 0], [255, 0, 0], [255, 105, 0], [255, 223, 0], [170, 255, 0], [52, 255, 0], [0, 255, 66], [0, 255, 183]
        ]


# TODO
class LedRaindowT2B(LedRaindow):
    def __init__(self, sense):
        super(LedRaindowT2B, self).__init__(sense)

    def get_base_pixels(self):
        return [
            [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], 
            [255, 96, 0], [255, 96, 0], [255, 96, 0], [255, 96, 0], [255, 96, 0], [255, 96, 0], [255, 96, 0], [255, 96, 0],
            [187, 255, 0], [187, 255, 0], [187, 255, 0], [187, 255, 0], [187, 255, 0], [187, 255, 0], [187, 255, 0], [187, 255, 0],
            [0, 255, 40], [0, 255, 40], [0, 255, 40], [0, 255, 40], [0, 255, 40], [0, 255, 40], [0, 255, 40], [0, 255, 40],
            [0, 243, 255], [0, 243, 255], [0, 243, 255], [0, 243, 255], [0, 243, 255], [0, 243, 255], [0, 243, 255], [0, 243, 255],
            [0, 17, 255], [0, 17, 255], [0, 17, 255], [0, 17, 255], [0, 17, 255], [0, 17, 255], [0, 17, 255], [0, 17, 255],
            [210, 0, 255], [210, 0, 255], [210, 0, 255], [210, 0, 255], [210, 0, 255], [210, 0, 255], [210, 0, 255], [210, 0, 255],
            [255, 0, 74], [255, 0, 74], [255, 0, 74], [255, 0, 74], [255, 0, 74], [255, 0, 74], [255, 0, 74], [255, 0, 74]
        ]


class LedRaindowB2T(LedRaindow):
    def __init__(self, sense):
        super(LedRaindowT2B, self).__init__(sense)

    def get_base_pixels(self):
        return [
            [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], [255, 0, 0], 
            [255, 96, 0], [255, 96, 0], [255, 96, 0], [255, 96, 0], [255, 96, 0], [255, 96, 0], [255, 96, 0], [255, 96, 0],
            [187, 255, 0], [187, 255, 0], [187, 255, 0], [187, 255, 0], [187, 255, 0], [187, 255, 0], [187, 255, 0], [187, 255, 0],
            [0, 255, 40], [0, 255, 40], [0, 255, 40], [0, 255, 40], [0, 255, 40], [0, 255, 40], [0, 255, 40], [0, 255, 40],
            [0, 243, 255], [0, 243, 255], [0, 243, 255], [0, 243, 255], [0, 243, 255], [0, 243, 255], [0, 243, 255], [0, 243, 255],
            [0, 17, 255], [0, 17, 255], [0, 17, 255], [0, 17, 255], [0, 17, 255], [0, 17, 255], [0, 17, 255], [0, 17, 255],
            [210, 0, 255], [210, 0, 255], [210, 0, 255], [210, 0, 255], [210, 0, 255], [210, 0, 255], [210, 0, 255], [210, 0, 255],
            [255, 0, 74], [255, 0, 74], [255, 0, 74], [255, 0, 74], [255, 0, 74], [255, 0, 74], [255, 0, 74], [255, 0, 74]
        ]



if __name__ == '__main__':
    sense = SenseHat()
    rainbow = LedRaindowT2B(sense)

    try:
        chFlg = 0
        prev_direction = None
        interval = 0

        while chFlg >= 0:
            for event in sense.stick.get_events():
                if event.direction == prev_direction:
                    prev_direction = None
                    continue

                if event.direction == "up":
                    chFlg = 1
                    rainbow.reset()

                if event.direction == "left":
                    interval += 1

                if event.direction == "down":
                    chFlg = 0

                if event.direction == "right":
                    interval -= 1
                    interval = 0 if interval < 0 else interval

                if event.direction == "middle":
                    chFlg = -1
                    sense.clear()

                prev_direction = event.direction

            if chFlg == 1:
                rainbow.next()
                msleep(interval)

    except KeyboardInterrupt:
        sense.clear()
        sys.exit()

